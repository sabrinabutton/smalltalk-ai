'From Pharo7.0.4 of 13 August 2019 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)] on 1 March 2020 at 7:45:46.310237 pm'!RobotMind subclass: #Dijkstra	instanceVariableNames: 'possiblePaths index currentPath pathSize test'	classVariableNames: ''	poolDictionaries: ''	category: 'JRMPC-Phase1-Minds'!!Dijkstra methodsFor: 'accessing' stamp: 'SabrinaButton 2/27/2020 15:11'!possiblePaths 	^possiblePaths.! !!Dijkstra methodsFor: 'accessing' stamp: 'SabrinaButton 2/27/2020 16:27'!currentPath	^currentPath.! !!Dijkstra methodsFor: 'accessing' stamp: 'SabrinaButton 2/27/2020 16:25'!index 	^index.! !!Dijkstra methodsFor: 'accessing' stamp: 'SabrinaButton 3/1/2020 18:04'!totalEnergy: aPath	|total|	total:= 0.		aPath do: [ :cell| 			"Check cell type and add energy based on such"			"Death Cell"			(cell isMemberOf: DeathCell)				ifTrue:[						total:= total -1000.					].			"Jump Cell"			(cell isMemberOf: JumpCell)				ifTrue:[						total:= total  + 100.					].			"Warp Cell"			(cell isMemberOf: WarpCell)				ifTrue:[						total:= total + 200.					].			"Default"					total:= total + cell energy.	].	^total.! !!Dijkstra methodsFor: 'running' stamp: 'SabrinaButton 3/1/2020 19:45'!initialize 		super initialize.	index:= 1.	possiblePaths:= 0.	pathSize:= 8.! !!Dijkstra methodsFor: 'competition-api' stamp: 'SabrinaButton 3/1/2020 19:45'!path: pathCollection next: cell context: aRobot index: anIndex	|newPath|	newPath:= pathCollection copyWith: cell.	(cell isMemberOf: DeathCell)		ifFalse: [ 			anIndex < pathSize			ifTrue:[											cell location fourNeighbors					do: [ :neighbor | 													self										path: newPath														next: (aRobot map cellAt: neighbor)														context: aRobot														index: (anIndex + 1) ].													].																									  ].		"If the path is done, then add this path to the possible paths for the mind."	anIndex = pathSize		ifTrue: [ 											self possiblePaths add: newPath.									].! !!Dijkstra methodsFor: 'competition-api' stamp: 'SabrinaButton 3/1/2020 18:04'!determinePathForRobot: aRobot|top|"Find a path with a length of ten that has high energy and no death cells."possiblePaths:= OrderedCollection new."Get neighbors and then get neighbors neighbors etc etc"self path: OrderedCollection new	  next: (aRobot map cellAt: aRobot location) 	  context: aRobot	  index: 0.	possiblePaths:= possiblePaths sort: [ :A :B |  (self totalEnergy: A )> (self totalEnergy: B)].top:= self possiblePaths at: 1.^top.	! !!Dijkstra methodsFor: 'competition-api' stamp: 'SabrinaButton 3/1/2020 19:45'!determineDirectionForRobot: aRobot|optionMove dirFound optionCheckIndex currentOption lookingFor nextBest|"If index is 0 then find a path"index = 1	ifTrue:[				currentPath:= self determinePathForRobot: aRobot.			test:=(self totalEnergy: currentPath).			index := 2.		].	"Follow path by going to cell at current index"optionMove := Array new: 4.	optionMove at: 1 put: 1 @ 0.	optionMove at: 2 put: -1 @ 0.	optionMove at: 3 put: 0 @ -1.	optionMove at: 4 put: 0 @ 1.optionCheckIndex:= 1.dirFound:= false.lookingFor:= (currentPath at: index) location.nextBest:= 1.[ dirFound ]		whileFalse:[				currentOption:= optionMove at: optionCheckIndex.								"sabrina are you actually stupid these lines are very wrong								BRING ME MY NOTEBOOK!!"				currentOption x + aRobot location x = lookingFor x				ifTrue: [  										currentOption y + aRobot location y = lookingFor y				ifTrue: [ dirFound:= true  ].										].									optionCheckIndex:= optionCheckIndex + 1.				optionCheckIndex=5					ifTrue:[							[ dirFound ]								whileFalse:[									currentOption:= optionMove at: nextBest.														(( aRobot map cellAt: aRobot location + currentOption ) isMemberOf: DeathCell  )								ifFalse:[										dirFound:= true.									]																		].																										].			].index:= index + 1."If index is 11, set it to 0 so we can find a new path"index = (pathSize + 1)	ifTrue:[			index:= 1.		].	direction := RobotDirection allDirections		detect: [ :dir | dir movement = currentOption ].! !